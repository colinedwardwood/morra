otelcol.receiver.otlp "default" {
	grpc { }
	http { }

	output {
		traces  = [otelcol.processor.tail_sampling.default.input]
	}
}

otelcol.processor.batch "default" {
	output {
		traces  = [otelcol.exporter.otlp.grafana_cloud_tempo.input]
	}
}

otelcol.exporter.otlp "grafana_cloud_tempo" {
	// https://grafana.com/docs/agent/latest/flow/reference/components/otelcol.exporter.otlp/
	client {
		endpoint = env("GRAFANA_CLOUD_TEMPO_ENDPOINT")
		auth     = otelcol.auth.basic.grafana_cloud_tempo.handler
	}
}

otelcol.auth.basic "grafana_cloud_tempo" {
	// https://grafana.com/docs/agent/latest/flow/reference/components/otelcol.auth.basic/
	username = env("GRAFANA_CLOUD_TEMPO_USERNAME")
	password = env("GRAFANA_CLOUD_API_KEY")
}

otelcol.processor.tail_sampling "default" {
  decision_wait               = "1s"
  num_traces                  = 10
  expected_new_traces_per_sec = 10

  policy {
    name = "node-js-exclusion-1"
    type = "string_attribute"

    string_attribute {
      key                    = "otel.library.name"
      values                 = ["@opentelemetry/instrumentation-fs"]
      enabled_regex_matching = false
      invert_match           = true
    }
  }

  policy {
      name = "node-js-exclusion-2"
      type = "string_attribute"

      string_attribute {
        key                    = "name"
        values                 = ["fs readFileSync"]
        enabled_regex_matching = false
        invert_match           = true
      }
    }

  output {
    traces = [otelcol.processor.batch.default.input]
  }
}

discovery.docker "linux" {
  host = "unix:///var/run/docker.sock"
}

loki.relabel "container" {
  forward_to = []
  rule {
    source_labels = ["__meta_docker_container_name"]
    regex= ".*-([^-]*)-.*"
    action= "replace"
    target_label = "service_name"
  }
}


loki.source.docker "default" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.docker.linux.targets 
  forward_to = [loki.write.grafana_cloud_loki.receiver]
  relabel_rules = loki.relabel.container.rules
}


loki.write "grafana_cloud_loki" {
	endpoint {
		url = env("GRAFANA_CLOUD_LOKI_URL")

		basic_auth {
			username = env("GRAFANA_CLOUD_LOKI_USERNAME")
			password = env("GRAFANA_CLOUD_API_KEY")
		}
	}
	external_labels = {"app"="morra_game"}
}

prometheus.scrape "default" {
  targets = [
    {"__address__" = "python_player", service_name="python_player", app="morra"}, 
    {"__address__" = "go_player", service_name="go_player", app="morra"}, 
    {"__address__" = "node_player", service_name="node_player", app="morra"}, 
    {"__address__" = "main", service_name="main_game", app="morra"},
  ]
  forward_to = [prometheus.remote_write.default.receiver]
}


prometheus.remote_write "default" {
  endpoint {
    url = env("GRAFANA_CLOUD_PROMETHEUS_URL")

    basic_auth {
      username = env("GRAFANA_CLOUD_PROMETHEUS_USERNAME")
      password = env("GRAFANA_CLOUD_API_KEY")
    }
  }
}